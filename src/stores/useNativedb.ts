import { defineStore } from 'pinia'
import axios from 'axios'

export const useNativedb = defineStore('nativedb', {
    state: () => ({
        namespacesJson: {} as INatives,
        loading: false,
        expansion: [] as string[],
        options: {
            bWithComments: true,
            maxCommentLength: 5000,
        },
        searchText: "",
    }),
    getters: {
        getSearchResults(store): INatives {
            // 搜素结果
            const results: INatives = {};
            if (store.searchText == '') {
                return store.namespacesJson
            }
            const lowerKeyword = store.searchText.toLowerCase();

            for (const namespace in store.namespacesJson) {
                if (namespace.toLowerCase().includes(lowerKeyword)) {
                    results[namespace] = {};
                }

                const nsObj = store.namespacesJson[namespace];
                for (const nativeKey in nsObj) {
                    const nativeObj = nsObj[nativeKey];

                    if (nativeKey.toLowerCase().includes(lowerKeyword) ||
                        nativeObj.name.toLowerCase().includes(lowerKeyword) ||
                        nativeObj.comment.toLowerCase().includes(lowerKeyword) ||
                        nativeObj.jhash?.toLowerCase().includes(lowerKeyword)
                    ) {
                        if (!results[namespace]) {
                            results[namespace] = {};
                        }
                        results[namespace][nativeKey] = nativeObj;
                        continue;
                    }

                    for (const param of nativeObj.params) {
                        if (param.name.toLowerCase().includes(lowerKeyword)) {
                            if (!results[namespace]) {
                                results[namespace] = {};
                            }
                            results[namespace][nativeKey] = nativeObj;
                            break;
                        }
                    }
                }
            }
            return results;
        }
    },
    actions: {
        async getNamespaces(url: string) {
            this.loading = true
            return axios.get(url).then(({ data }) => {
                this.namespacesJson = data
                // console.log(this.namespacesJson);
                this.loading = false
            })
        },
        // 生成 natives.h 文件
        async generateNativesFile() {
            let endl = "\r\n"
            let resultString = "";
            let date = new Date();
            resultString += "#pragma once" + endl + endl
                + "// Generated By: https://nativedb.aoe.top . time:" + date.toUTCString() + endl + endl;
            for (let namespace in this.namespacesJson) {
                resultString += "namespace " + namespace + endl +
                    "{" + endl;
                let nsObj = this.namespacesJson[namespace];
                for (let native in nsObj) {
                    let nativeObj = nsObj[native];

                    if (this.options.bWithComments && nativeObj.comment !== "" && nativeObj.comment.length <= this.options.maxCommentLength) {
                        // 写入注释
                        let commentStr = nativeObj.comment;
                        let lines = commentStr.split(/\r?\n/);
                        for (let i = 0; i < lines.length; i++) {
                            if (lines[i] != '') {
                                resultString += "\t/** " + lines[i] + " */" + endl;
                            }
                        }
                    }

                    resultString += "\tstatic " + nativeObj.return_type + " " + nativeObj.name + "(";
                    let paramsObj = nativeObj["params"];
                    paramsObj.forEach((paramObj, index) => {
                        // let paramObj = paramsObj[param];
                        resultString += paramObj.type + (paramObj.type == "" ? "" : " ") + paramObj.name + (index != paramsObj.length - 1 ? ", " : "");
                    })
                    if (nativeObj.return_type == "void") {
                        resultString += ") { invoke<Void>(";
                    }
                    else {
                        resultString += ") { return invoke<" + nativeObj.return_type + ">(";
                    }
                    resultString += native + (paramsObj.length != 0 ? ", " : "");
                    paramsObj.forEach((paramObj, index) => {
                        resultString += paramObj.name + (index != paramsObj.length - 1 ? ", " : "");
                    })
                    resultString += "); }" + " // " + native + (nativeObj.unused ? " unused" : "") + ` ${nativeObj.jhash || ''} ${nativeObj.build ? `b${nativeObj.build}` : ''}` + endl;
                }
                resultString += "}" + endl + endl;
            }
            this.download("natives.h", resultString);

        },
        // 下载文件
        download(filename: string, text: string) {
            var element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        },

    }
})